language: c  # We are not using the Python infrastructure
dist: trusty
sudo: required

matrix:
  include:
    - python: "2.7"
      env: PYTHON="2.7" CONDA_PY="27" ARCHITECTURE="x86_64" DEPENDENCIES="stable"
      os: linux
    - python: "3.5"
      env: PYTHON="3.5" CONDA_PY="35" ARCHITECTURE="x86_64" DEPENDENCIES="stable"
      os: linux
    - python: "2.7"
      env: PYTHON="2.7" CONDA_PY="27" ARCHITECTURE="x86_64" DEPENDENCIES="stable"
      os: osx
      osx_image: xcode8.3
    - python: "3.5"
      env: PYTHON="3.5" CONDA_PY="35" ARCHITECTURE="x86_64" DEPENDENCIES="stable"
      os: osx
      osx_image: xcode8.3
    - python: "2.7"
      env: PYTHON="2.7" CONDA_PY="27" ARCHITECTURE="x86_64" DEPENDENCIES="latest"
      os: linux
    - python: "3.5"
      env: PYTHON="3.5" CONDA_PY="35" ARCHITECTURE="x86_64" DEPENDENCIES="latest"
      os: linux
    - python: "2.7"
      env: PYTHON="2.7" CONDA_PY="27" ARCHITECTURE="x86_64" DEPENDENCIES="latest"
      os: osx
      osx_image: xcode8.3
    - python: "3.5"
      env: PYTHON="3.5" CONDA_PY="35" ARCHITECTURE="x86_64" DEPENDENCIES="latest"
      os: osx
      osx_image: xcode8.3
  allow_failures:
    env: DEPENDENCIES="latest"
  fast_finish: true

# Use miniconda to install binary versions of numpy etc. from continuum
# analytic's repository. Follows an approach described by Dan Blanchard:
# https://gist.github.com/dan-blanchard/7045057
before_install:
- if [ ${PYTHON:0:1} == "2" ]; then
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
    travis_retry wget http://repo.continuum.io/miniconda/Miniconda2-latest-Linux-$ARCHITECTURE.sh -O miniconda.sh;
    else
    travis_retry wget http://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-$ARCHITECTURE.sh -O miniconda.sh;
    fi;
    else
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
    travis_retry wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-$ARCHITECTURE.sh -O miniconda.sh;
    else
    travis_retry wget http://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-$ARCHITECTURE.sh -O miniconda.sh;
    fi;
  fi
- chmod +x miniconda.sh
- ./miniconda.sh -b -p ~/miniconda
- export PATH=~/miniconda/bin:$PATH

# command to install dependencies
install:
  - if [ "$DEPENDENCIES" == "stable" ]; then
        BRIAN_CHANNEL="brian-team";
    else
        BRIAN_CHANNEL="brian-team/label/dev";
    fi
  - travis_retry conda install --yes --quiet -c brian-team py-cpuinfo nose python=$PYTHON
  - travis_retry conda install --yes --quiet -c $BRIAN_CHANNEL brian2
  # Install gcc via conda -- the version provided by Ubuntu in this container image is too old
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then conda install --yes --quiet gcc; fi
  - cd ../..
  - if [ "$DEPENDENCIES" == "latest" ]; then
       BRANCH_ARGUMENT="-b development";
    fi
  # Install minimal CUDA components to build the conda package later
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      CUDA_URL=http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_8.0.61-1_amd64.deb;
      CUDA_FILE=/tmp/cuda_install.deb;
    else
      CUDA_URL=https://developer.nvidia.com/compute/cuda/8.0/Prod2/network_installers/cuda_8.0.61_mac_network-dmg;
      CUDA_FILE=/tmp/cuda_install.dmg;
    fi
  - travis_retry curl $CUDA_URL -o $CUDA_FILE
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo dpkg -i $CUDA_FILE &&
      rm -f $CUDA_FILE;
      sudo apt-get update -qq -y &&
      sudo apt-get install -q -y cuda-core-8-0 cuda-misc-headers-8-0 cuda-cudart-dev-8-0 &&
      export CUDA_PATH=/usr/local/cuda-8.0/;
    else
      hdiutil attach $CUDA_FILE;
    fi
  - export GENN_PATH=$(pwd)/brian-team/brian2genn/genn
  - cd brian-team/brian2genn

# command to run tests
script:
  - pip install .
  - python scripts/run_brian_tests_CPU.py

after_success:
  - travis_retry conda install --yes --quiet conda-build
  - unset GENN_PATH
  - echo "CUDA_PATH: $CUDA_PATH"
  - conda build -c brian-team conda_recipe
  - python scripts/move_conda_package.py conda_recipe

notifications:
  email: false
